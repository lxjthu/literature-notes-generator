/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LiteratureNotesGenerator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  readingCards: [
    "\u653F\u7B56\u80CC\u666F",
    "\u7406\u8BBA\u80CC\u666F",
    "\u7406\u8BBA\u610F\u4E49",
    "\u73B0\u5B9E\u610F\u4E49",
    "\u586B\u8865\u7A7A\u767D",
    "\u7406\u8BBA\u57FA\u7840",
    "\u7406\u8BBA\u6846\u67B6",
    "\u5173\u952E\u81EA\u53D8\u91CF",
    "\u5173\u952E\u56E0\u53D8\u91CF",
    "\u673A\u5236\u53D8\u91CF",
    "\u5DE5\u5177\u53D8\u91CF",
    "\u8C03\u8282\u53D8\u91CF",
    "\u63A7\u5236\u53D8\u91CF",
    "\u6570\u636E\u6765\u6E90",
    "\u5206\u6790\u65B9\u6CD5",
    "\u5F71\u54CD\u673A\u5236",
    "\u673A\u5236\u5206\u6790",
    "\u7A33\u5065\u6027\u68C0\u9A8C"
  ]
};
var FolderNameModal = class extends import_obsidian.Modal {
  constructor(app, defaultName, onSubmit) {
    super(app);
    this.defaultName = defaultName;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "\u8BBE\u7F6E\u6587\u732E\u7B14\u8BB0\u6587\u4EF6\u5939\u540D\u79F0" });
    const inputEl = contentEl.createEl("input", {
      type: "text",
      value: this.defaultName
    });
    inputEl.style.width = "100%";
    inputEl.style.marginBottom = "1em";
    const buttonEl = contentEl.createEl("button", { text: "\u786E\u8BA4" });
    buttonEl.addEventListener("click", () => {
      this.onSubmit(inputEl.value);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var LiteratureNotesGenerator = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("documents", "\u751F\u6210\u6587\u732E\u7B14\u8BB0\u7ED3\u6784", () => {
      this.generateNotes();
    });
    this.addSettingTab(new LiteratureNotesSettingTab(this.app, this));
    this.addCommand({
      id: "generate-literature-notes",
      name: "\u751F\u6210\u6587\u732E\u7B14\u8BB0\u7ED3\u6784",
      callback: () => this.generateNotes()
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async generateNotes() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      return;
    }
    const defaultFolderName = activeFile.basename;
    new FolderNameModal(this.app, defaultFolderName, async (folderName) => {
      const content = await this.app.vault.read(activeFile);
      const literatures = this.parseLiteratures(content);
      const mainFolder = await this.createFolderIfNotExists(folderName);
      for (const lit of literatures) {
        await this.createLiteratureStructure(mainFolder, lit);
      }
      let newContent = content;
      for (const lit of literatures) {
        const overviewPath = `${folderName}/${lit.title}/Overview`;
        const linkText = `[[${overviewPath}|${lit.title}]]`;
        newContent = newContent.replace(
          new RegExp(`${lit.title} \\[J\\]`),
          `${linkText} [J]`
        );
      }
      await this.app.vault.modify(activeFile, newContent);
    }).open();
  }
  async createLiteratureStructure(mainFolder, literature) {
    const litFolder = await this.createFolderIfNotExists(`${mainFolder.path}/${literature.title}`);
    await this.createOverviewNote(litFolder, literature);
    const cardsFolder = await this.createFolderIfNotExists(`${litFolder.path}/Reading Cards`);
    for (const cardName of this.settings.readingCards) {
      await this.createCard(cardsFolder, cardName, literature);
    }
  }
  async createOverviewNote(folder, literature) {
    const content = this.generateOverviewContent(literature);
    await this.app.vault.create(`${folder.path}/Overview.md`, content);
  }
  async createCard(folder, cardName, literature) {
    const content = this.generateCardContent(cardName, literature);
    await this.app.vault.create(`${folder.path}/${cardName}.md`, content);
  }
  generateOverviewContent(literature) {
    return `---
title: ${literature.title}
authors: ${literature.authors}
journal: ${literature.journal}
date: ${literature.publicationDate}
type: overview
---

# ${literature.title}

## \u57FA\u672C\u4FE1\u606F
- \u4F5C\u8005\uFF1A${literature.authors}
- \u671F\u520A\uFF1A${literature.journal}
- \u53D1\u8868\u65F6\u95F4\uFF1A${literature.publicationDate}

## \u7B14\u8BB0\u5BFC\u822A
${this.settings.readingCards.map((card) => `- [[${card}]]`).join("\n")}
`;
  }
  generateCardContent(cardName, literature) {
    return `---
title: ${literature.title}
authors: ${literature.authors}
journal: ${literature.journal}
date: ${literature.publicationDate}
type: reading-card
card-type: ${cardName}
---

# ${cardName}

`;
  }
  async createFolderIfNotExists(path) {
    if (!await this.app.vault.adapter.exists(path)) {
      await this.app.vault.createFolder(path);
    }
    return this.app.vault.getAbstractFileByPath(path);
  }
  parseLiteratures(content) {
    const lines = content.split("\n");
    const literatures = [];
    for (const line of lines) {
      const match = line.match(/\[\d+\](.*?)\. (.*?) \[J\]\. (.*?), (\d{4})/);
      if (match) {
        const [, authors, title, journal, publicationDate] = match;
        literatures.push({
          title: title.trim(),
          authors: authors.trim(),
          journal: journal.trim(),
          publicationDate: publicationDate.trim()
        });
      }
    }
    return literatures;
  }
};
var LiteratureNotesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u6587\u732E\u7B14\u8BB0\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u9605\u8BFB\u5361\u7247\u7C7B\u578B").setDesc("\u6BCF\u884C\u4E00\u4E2A\u5361\u7247\u7C7B\u578B\uFF0C\u53EF\u4EE5\u6DFB\u52A0\u3001\u5220\u9664\u6216\u4FEE\u6539").addTextArea((text) => text.setPlaceholder("\u6BCF\u884C\u8F93\u5165\u4E00\u4E2A\u5361\u7247\u7C7B\u578B").setValue(this.plugin.settings.readingCards.join("\n")).onChange(async (value) => {
      this.plugin.settings.readingCards = value.split("\n").filter((line) => line.trim());
      await this.plugin.saveSettings();
    }));
  }
};
